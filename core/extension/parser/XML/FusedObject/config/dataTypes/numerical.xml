<?xml version="1.0" encoding="UTF-8"?>
<root>
    <!-- 
        #################### NUMERICAL Data Types ####################
        Restrictions that can be used with Numerical data types:
        - fractionDigits        Specifies the maximum number of decimal places 
                                allowed. Must be equal to or greater than zero
        - length                Specifies the exact number of characters or list 
                                items allowed. Must be equal to or greater than zero
        - maxExclusive          Specifies the upper bounds for numeric values 
                                (the value must be less than this value)
        - maxInclusive          Specifies the upper bounds for numeric values 
                                (the value must be less than or equal to this value)
        - maxLength             Specifies the maximum number of characters or list 
                                items allowed. Must be equal to or greater than zero
        - minExclusive          Specifies the lower bounds for numeric values 
                                (the value must be greater than this value)
        - minInclusive          Specifies the lower bounds for numeric values 
                                (the value must be greater than or equal to this value)
        - minLength             Specifies the minimum number of characters or 
                                list items allowed. Must be equal to or greater than zero
        - pattern               Defines the exact sequence of characters that 
                                are acceptable
        - totalDigits           Specifies the exact number of digits allowed. 
                                Must be greater than zero
        - whiteSpace            Specifies how white space (line feeds, tabs, 
                                spaces, and carriage returns) is handled

        The number data type is used to specify string that contains only numbers.
        This can include the '+' and '-' signs
    -->
    <number
        extends="base"
        defaultValue="0"
        restrictions="length,maxLength,minLength,totalDigits"/>
    
    <!--
        The integer data type is used to specify a numeric value 
        without a fractional component.
        999 or +999 or -999 or 0
    -->
    <integer
        extends="number"
        defaultValue="0"
        restrictions="maxExclusive,maxInclusive,minExclusive,minInclusive"/>

    <!--
        A signed 32-bit integer
        The number 2,147,483,647 (or hexadecimal 7FFF,FFFF16) 
        is the maximum positive value for a 32-bit signed binary integer in computing. 
        It is therefore the maximum value for variables declared as integers (e.g., as int) 
    -->
    <int
        extends="integer"
        defaultValue="0"/>

    <!--
        A signed 64-bit integer
        Max: 9223372036854775807 min: -9223372036854775808
    -->
    <long 
        alias="longInt,longInterger,bigInt,bigInteger"
        extends="integer"
        defaultValue="0"/>

    <!--
        An integer containing only negative values (..,-2,-1)
    -->
    <negativeInteger 
        alias="negInt,negativeInt,negInteger"
        extends="integer"
        defaultValue="-1"/>

    <!--
        An integer containing only non-negative values (0,1,2,..)
    -->
    <nonNegativeInteger 
        alias="nonNegInt,nonNegativeInt,nonNegInterger"
        extends="integer"
        defaultValue="0"/>

    <!--
        An integer containing only non-positive values (..,-2,-1,0)
    -->
    <nonPositiveInteger 
        alias="nonPosInt,nonPositiveInt,nonPosInteger"
        extends="integer"
        defaultValue="-1"/>

    <!--
        An integer containing only positive values (1,2,..)
    -->
    <positiveInteger 
        alias="posInt,positiveInt,posInteger"
        extends="integer"
        defaultValue="-1"/>

    <!--
        A signed 16-bit integer
        min: –32768 max: 32767
    -->
    <short 
        alias="shortInt,shortInteger"
        extends="integer"
        defaultValue="0"/>

    <!--
        An unsigned 64-bit integer
    -->
    <unsignedLong 
        alias="unLong"
        extends="integer"
        defaultValue="0"/>

    <!--
        An unsigned 32-bit integer
    -->
    <unsignedInt 
        alias="unInt"
        extends="integer"
        defaultValue="0"/>

    <!--
        An unsigned 16-bit integer
    -->
    <unsignedShort 
        alias="unShort,unShortInt,unShortInteger"
        extends="integer"
        defaultValue="0"/>

    <!--
    - The value space of xsd:byte includes the integers between -128 and 127—the signed 
      values that can fit in a word of 8 bits. Its lexical space allows an optional 
      sign and leading zeros before the significant digits.
    - The lexical space doesn't allow values expressed in other numeration bases 
      (such as hexadecimal, octal, or binary).
    - Valid values for byte include 27, -34, +105, and 0.
    - Invalid values include 0A, 1524, and INF.
    -->
    <byte
        defaultValue="0"
        extends="integer"/>
    
    <!--
        An unsigned 8-bit integer
    -->
    <unsignedByte 
        alias="unByte"
        extends="integer"
        defaultValue="0"/>
    <!--
        The decimal data type is used to specify a numeric value
        999.50 or +999.5450 or -999.5230 or 0 or 14
        The maximum number of decimal digits you can specify is 18
    -->
    <decimal 
        alias="dec"
        extends="integer"
        defaultValue="0.00"
        restrictions="fractionDigits"/>

    <!--
        - Double is double (64 bits) floating-point numbers as defined 
          by the IEEE (Institute of Electrical and Electronic Engineers).
        - The lexical space uses a decimal format with optional scientific notation.
        - The match between lexical (powers of 10) and value (powers of 2) spaces 
          is approximate and done on the closest value
        - This datatype differentiates positive (0) and negative (-0) zeros, and 
          includes the special values -INF (negative infinity), 
          INF (positive infinity) and NaN (Not a Number).
        - The decimal separator is always a point (.), and no thousands separator 
          may be used.
        - Valid values include: 123.456, +1234.456, -1.2344e56, -.45E-6, INF, -INF, or NaN.
        - The following values are invalid: 1234.4E 56 (spaces are forbidden), 
          1E+2.5 (the power of 10 must be an integer), +INF (positive infinity 
          doesn't expect a sign), or NAN (capitalization matters in special values).
    -->
    <double
        extends="decimal"
        defaultValue="0.00"/>

    <!-- 
        - The value space of xsd:float is "float," 32-bit floating-point numbers as 
          defined by the IEEE. The lexical space uses a decimal format with optional 
          scientific notation. The match between lexical (powers of 10) and value 
          (powers of 2) spaces is approximate and maps to the closest value.
        - This datatype differentiates positive (0) and negative (-0) zeros, and 
          includes the special values -INF (negative infinity), INF (positive infinity), 
          and NaN (Not a Number).
        - Note that the lexical spaces of xsd:float and xsd:double are exactly the same; 
          the only difference is the precision used to convert the values in the value space.
        - The decimal separator is always a point (.), and no thousands separator may be added.

        Valid values include: 123.456, +1234.456, -1.2344e56, -.45E-6, INF, -INF, and NaN.

        The following values are invalid: 1234.4E 56 (spaces are forbidden), 1E+2.5 
        (the power of 10 must be an integer), +INF (positive infinity doesn't expect a sign), 
        or NAN (capitalization matters in special values).
    -->
    <float
        extends="decimal"
        defaultValue="0.00"/>
</root>